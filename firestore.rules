rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /conversations/{conversationId} {
      // Only participants can read and write to their conversations
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow creation if the current user is one of the participants
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
    }
    
    match /messages/{messageId} {
      // Only participants of the linked conversation can read messages
      allow read: if request.auth != null && exists(resource.data.conversationId);
      
      // Only the sender can create their own messages
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId;
        
      // Only message creator can update or delete their messages
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.senderId;
    }
    
    // User profiles can be read by anyone but only written by the owner
    match /users/{userId} {
      allow read: if request.auth != null;
      
      // Allow users to write to their own profiles
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // SIMPLIFIED SOCIAL RULE: Allow any authenticated user to update followers-related fields
      // This is a more permissive rule to ensure the follow functionality works
      allow update: if request.auth != null && 
                     (request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(["followers", "followersCount", "following", "followingCount"]));
      
      // Special rule for credits - only allow decrement operations through validated functions
      // This prevents users from directly increasing their own credits
      allow update: if request.auth != null && 
                    request.auth.uid == userId && 
                    (
                      // Only allow credit updates through specific fields or through approved paths
                      // like profile updates that don't touch the credits field
                      !("credits" in request.resource.data) || 
                      request.resource.data.credits <= resource.data.credits || 
                      // Allow system functions to increase credits
                      request.auth.token.admin == true
                    );
    }
    
    // Course rules - allow full CRUD for authenticated users
    match /courses/{courseId} {
      // Anyone can read courses
      allow read: if request.auth != null;
      
      // Only the creator can update or delete courses
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.creatorId;
      
      // Allow any authenticated user to update ONLY the enrollments field
      allow update: if request.auth != null && 
                   !(request.auth.uid == resource.data.creatorId) &&
                   request.resource.data.diff(resource.data).affectedKeys().hasOnly(["enrollments"]) &&
                   request.resource.data.enrollments == resource.data.enrollments + 1;
      
      // Allow creation of new courses
      allow create: if request.auth != null;
    }
    
    // Post rules
    match /posts/{postId} {
      // Anyone can read posts
      allow read: if request.auth != null;
      
      // Only the creator can update or delete their own posts
      allow update, delete: if request.auth != null && 
                           request.auth.uid == resource.data.userId;
      
      // Allow creation of new posts
      allow create: if request.auth != null;
      
      // Special rule for likes and comments - allow updates by any authenticated user
      allow update: if request.auth != null && 
                   (request.resource.data.diff(resource.data).affectedKeys().hasOnly(["likes", "comments", "updatedAt"]));
      
      // Allow access to comments subcollection
      match /comments/{commentId} {
        // Anyone can read comments
        allow read: if request.auth != null;
        
        // Only the comment creator can create or update their own comments
        allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId;
        
        // Only the comment creator can update or delete their comments
        allow update, delete: if request.auth != null && 
                             request.auth.uid == resource.data.userId;
      }
    }
    
    // Allow access to standalone comments collection if you're using one
    match /comments/{commentId} {
      // Anyone can read comments
      allow read: if request.auth != null;
      
      // Only the comment creator can create comments
      allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.userId;
      
      // Only the comment creator can update or delete their comments
      allow update, delete: if request.auth != null && 
                           request.auth.uid == resource.data.userId;
    }
    
    // Transaction records - for tracking credit deductions and additions
    match /transactions/{transactionId} {
      // Users can only read their own transactions
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      
      // Transactions can only be created, not updated or deleted
      // And only for the current user
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
        
      // No updates or deletes allowed to transaction records
      allow update, delete: if false;
    }
    
    // Notification rules
    match /notifications/{notificationId} {
      // Users can only read their own notifications
      // This rule allows both individual document reads and queries with recipientId filter
      allow read: if request.auth != null && 
                  (resource.data.recipientId == request.auth.uid || 
                   (request.query.limit <= 100 && 
                    request.query.filters.size() > 0 && 
                    request.query.filters.hasOnly([['recipientId', '==', request.auth.uid]])
                    || (request.query.filters.hasOnly([['recipientId', '==', request.auth.uid], ['read', '==', false]]))
                   ));
      
      // Allow creating notifications for any authenticated user
      // This enables features like notifying users about new posts, likes, etc.
      allow create: if request.auth != null;
      
      // Allow users to update only their own notifications (marking as read)
      // And only allow updating the 'read' field
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.recipientId &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(["read"]);
      
      // Allow users to delete their own notifications
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.recipientId;
    }
  }
} 